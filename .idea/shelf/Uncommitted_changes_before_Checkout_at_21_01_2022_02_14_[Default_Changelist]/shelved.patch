Index: zamowienia/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom sklep.models import Product\r\n\r\n\r\nclass Zamowienia(models.Model):\r\n    imie = models.CharField(max_length=50)\r\n    nazwisko = models.CharField(max_length=50)\r\n    email = models.EmailField()\r\n    adres = models.CharField(max_length=250)\r\n    kod_pocztowy = models.CharField(max_length=20)\r\n    miasto = models.CharField(max_length=100)\r\n    utworzono = models.DateTimeField(auto_now_add=True)\r\n    zaktualizowano = models.DateTimeField(auto_now=True)\r\n    platnosc = models.BooleanField(default=False)\r\n\r\n<<<<<<< HEAD\r\n\r\nclass Meta:\r\n    ordering = ('-created',)\r\n\r\n    def __str__(self):\r\n\r\n        return 'Order {}'.format(self.id)\r\n\r\n    def get_total_cost(self):\r\n\r\n=======\r\n    class Meta:\r\n        ordering = ('-id',)\r\n\r\n    def __str__(self):\r\n        return f'Order {self.id}'\r\n\r\n    def get_total_cost(self):\r\n>>>>>>> origin/master\r\n        return sum(item.get_cost() for item in self.items.all())\r\n\r\n\r\nclass OrderItem(models.Model):\r\n<<<<<<< HEAD\r\n    order = models.ForeignKey(Zamowienia, related_name='items',\r\n=======\r\n    order = models.ForeignKey(Zamowienia,\r\n                              related_name='items',\r\n>>>>>>> origin/master\r\n                              on_delete=models.CASCADE)\r\n    product = models.ForeignKey(Product,\r\n                                related_name='order_items',\r\n                                on_delete=models.CASCADE)\r\n    price = models.DecimalField(max_digits=10, decimal_places=2)\r\n    quantity = models.PositiveIntegerField(default=1)\r\n\r\n    def __str__(self):\r\n<<<<<<< HEAD\r\n\r\n        return '{}'.format(self.id)\r\n\r\n    def get_cost(self):\r\n\r\n=======\r\n        return str(self.id)\r\n\r\n    def get_cost(self):\r\n>>>>>>> origin/master\r\n        return self.price * self.quantity\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/zamowienia/models.py b/zamowienia/models.py
--- a/zamowienia/models.py	(revision a12896bfe8cbec918f2485da7b9e572d8321d5a2)
+++ b/zamowienia/models.py	(date 1642727628848)
@@ -13,8 +13,6 @@
     zaktualizowano = models.DateTimeField(auto_now=True)
     platnosc = models.BooleanField(default=False)
 
-<<<<<<< HEAD
-
 class Meta:
     ordering = ('-created',)
 
@@ -24,7 +22,6 @@
 
     def get_total_cost(self):
 
-=======
     class Meta:
         ordering = ('-id',)
 
@@ -32,34 +29,25 @@
         return f'Order {self.id}'
 
     def get_total_cost(self):
->>>>>>> origin/master
         return sum(item.get_cost() for item in self.items.all())
 
 
 class OrderItem(models.Model):
-<<<<<<< HEAD
+
     order = models.ForeignKey(Zamowienia, related_name='items',
-=======
+
     order = models.ForeignKey(Zamowienia,
                               related_name='items',
->>>>>>> origin/master
-                              on_delete=models.CASCADE)
-    product = models.ForeignKey(Product,
-                                related_name='order_items',
-                                on_delete=models.CASCADE)
-    price = models.DecimalField(max_digits=10, decimal_places=2)
-    quantity = models.PositiveIntegerField(default=1)
+                              on_delete=models.CASCADE),
+                              product = models.ForeignKey(Product,related_name='order_items',on_delete=models.CASCADE),
+                              price = models.DecimalField(max_digits=10, decimal_places=2),
+                              quantity = models.PositiveIntegerField(default=1)
 
     def __str__(self):
-<<<<<<< HEAD
-
         return '{}'.format(self.id)
 
     def get_cost(self):
-
-=======
         return str(self.id)
 
     def get_cost(self):
->>>>>>> origin/master
         return self.price * self.quantity
Index: sklep/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.urls import reverse\r\n\r\n\r\nclass Category(models.Model):\r\n    name = models.CharField(max_length=200,\r\n                            db_index=True)\r\n    slug = models.SlugField(max_length=200,\r\n                            db_index=True,\r\n                            unique=True)\r\n\r\n    class Meta:\r\n        ordering = ('name',)\r\n        verbose_name = 'category'\r\n        verbose_name_plural = 'categories'\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('sklep:product_list_by_category',\r\n                       args=[self.slug])\r\n\r\n\r\nclass Product(models.Model):\r\n    category = models.ForeignKey(Category,\r\n                                 related_name='products',\r\n                                 on_delete=models.CASCADE)\r\n    name = models.CharField(max_length=200, db_index=True)\r\n    slug = models.SlugField(max_length=200, db_index=True)\r\n    image = models.ImageField(upload_to='products/%Y/%m/%d',\r\n                              blank=True)\r\n    description = models.TextField(blank=True)\r\n    price = models.DecimalField(max_digits=10, decimal_places=2)\r\n    available = models.BooleanField(default=True)\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n\r\n    class Meta:\r\n        ordering = ('name',)\r\n        index_together = (('id', 'slug'),)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('sklep:product_detail',\r\n<<<<<<< HEAD:sklep/models.py\r\n                       args=[self.id, self.slug])\r\n=======\r\n                       args=[self.id, self.slug])\r\n>>>>>>> origin/master:sklep_internetowy/sklep/models.py\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sklep/models.py b/sklep/models.py
--- a/sklep/models.py	(revision a12896bfe8cbec918f2485da7b9e572d8321d5a2)
+++ b/sklep/models.py	(date 1642727402228)
@@ -44,9 +44,4 @@
         return self.name
 
     def get_absolute_url(self):
-        return reverse('sklep:product_detail',
-<<<<<<< HEAD:sklep/models.py
-                       args=[self.id, self.slug])
-=======
-                       args=[self.id, self.slug])
->>>>>>> origin/master:sklep_internetowy/sklep/models.py
+        return reverse('sklep:product_detail')
